<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<?xml-stylesheet href="./_c74_ref.xsl" type="text/xsl"?>

<!--This file has been automatically generated by Doctor Max. DO NOT EDIT THIS FILE DIRECTLY.-->

<c74object name="ears.hoa.rotate~" module="ears">

	<digest>
		Rotate higher-order ambisonic buffers
	</digest>

	<description>
		Performs a rotation in the higher-order ambisonic domain
	</description>

	<!--METADATA-->
	<metadatalist>
		<metadata name="author">Daniele Ghisi</metadata>
		<metadata name="tag">ears ambisonic</metadata>
	</metadatalist>

	<!--INLETS-->
	<inletlist>
		<inlet id="0" type="INLET_TYPE">
			<digest>
				Incoming buffer names
			</digest>
			<description>
			</description>
		</inlet>
		<inlet id="1" type="INLET_TYPE">
			<digest>
				Rotation angle around Z axis (yaw)
			</digest>
			<description>
			</description>
		</inlet>
		<inlet id="2" type="INLET_TYPE">
			<digest>
				Rotation angle around X axis (pitch)
			</digest>
			<description>
			</description>
		</inlet>
		<inlet id="3" type="INLET_TYPE">
			<digest>
				Rotation angle around Y axis (roll)
			</digest>
			<description>
			</description>
		</inlet>
	</inletlist>

	<!--OUTLETS-->
	<outletlist>
		<outlet id="0" type="INLET_TYPE">
			<digest>
				Output buffer names
			</digest>
			<description>
			</description>
		</outlet>
	</outletlist>

	<!--ARGUMENTS-->
	<objarglist>
		<objarg name="outnames" optional="1" type="symbol">
			<digest>
				Output buffer names
			</digest>
			<description>
			</description>
		</objarg>
		<objarg name="yaw" optional="1" type="number">
			<digest>
				Yaw
			</digest>
			<description>
				Rotation angle around Z axis (yaw)
			</description>
		</objarg>
		<objarg name="pitch" optional="1" type="number">
			<digest>
				Pitch
			</digest>
			<description>
				Rotation angle around X axis (pitch)
			</description>
		</objarg>
		<objarg name="roll" optional="1" type="number">
			<digest>
				Roll
			</digest>
			<description>
				Rotation angle around Y axis (roll)
			</description>
		</objarg>
	</objarglist>

	<!--MESSAGES-->
	<methodlist>
		<method name="list/llll">
			<arglist />
			<digest>
				Function depends on inlet
			</digest>
			<description>
				A list or llll in the first inlet is supposed to contain buffer names and will
				trigger the buffer processing and output the processed buffer names (depending on the <m>naming</m> attribute). <br />
				A number or an llll in the second, third, or fourth inlet is expected to receive the yaw, pitch and roll parameters
				or envelopes (also see <m>envampunit</m>).
			</description>
		</method>
		<method name="number">
			<arglist />
			<digest>
				Set yaw, pitch, roll
			</digest>
			<description>
				A number in the second, third or fourth inlet respectively sets the yaw, pitch and roll
			</description>
		</method>
		<method name="quaternion">
			<arg name="w" optional="0" type="float" />
			<arg name="x" optional="0" type="float" />
			<arg name="y" optional="0" type="float" />
			<arg name="z" optional="0" type="float" />
			<digest>
				Define rotation from quaternion
			</digest>
			<description>
				Syntax: <b>quaternion <m>&lt;float: w&gt;</m> <m>&lt;float: x&gt;</m> <m>&lt;float: y&gt;</m> <m>&lt;float: z&gt;</m> </b><br />				<br />
				A <m>quaternion</m> message, followed by four arguments (W, X, Y, Z) sets the rotation
				from a quaternion (W being the real part).
			</description>
		</method>
	</methodlist>

	<!--ATTRIBUTES-->
	<attributelist>
		<attribute name="dimension" get="1" set="1" type="symbol" size="1">
			<digest>
				Dimension
			</digest>
			<description>
				Sets the dimension (order will then be inferred from the number of input channels).
			</description>
			<attributelist>
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Dimension" />
				<attribute name="paint" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="enum" />
			</attributelist>
		</attribute>
	</attributelist>

	<!--DISCUSSION-->
	<discussion>
		The object uses the HOALibrary (https://github.com/CICM/HoaLibrary-Light)
		in turns using the Eigen library (http://eigen.tuxfamily.org)
		(the 3D rotation capability has been added to the HOALibrary by Daniele Ghisi,
		with the purpose of having this ears object).
		The normalization convention is SN2D or SN3D (depending on the dimension),
		the channel order is ACN.
	</discussion>

	<!--SEEALSO-->
	<seealsolist>
		<seealso name="ears.hoa.encode~" />
		<seealso name="ears.hoa.decode~" />
		<seealso name="ears.hoa.mirror~" />
	</seealsolist>

	<misc name = "Input">
		<entry name ="Inlet 1 (symbol/list/llll)">
			<description>
				Incoming buffer names.
			</description>
		</entry>
		<entry name ="Inlet 2 (number/llll)">
			<description>
				Rotation angle around Z axis (yaw).
			</description>
		</entry>
		<entry name ="Inlet 3 (number/llll)">
			<description>
				Rotation angle around X axis (pitch).
			</description>
		</entry>
		<entry name ="Inlet 4 (number/llll)">
			<description>
				Rotation angle around Y axis (roll).
			</description>
		</entry>
	</misc>

	<misc name = "Output">
		<entry name ="Outlet 1 (symbol/list)">
			<description>
				Output buffer names.
			</description>
		</entry>
	</misc>

	<misc name = "Discussion">
		<entry name ="More details">
			<description>
		The object uses the HOALibrary (https://github.com/CICM/HoaLibrary-Light)
		in turns using the Eigen library (http://eigen.tuxfamily.org)
		(the 3D rotation capability has been added to the HOALibrary by Daniele Ghisi,
		with the purpose of having this ears object).
		The normalization convention is SN2D or SN3D (depending on the dimension),
		the channel order is ACN.
			</description>
		</entry>
		<entry name ="Keywords">
			<description>
buffer, ambisonic, rotate, hoa, 3d, rotation.
			</description>
		</entry>
	</misc>

</c74object>