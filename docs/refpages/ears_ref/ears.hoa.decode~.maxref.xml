<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<?xml-stylesheet href="./_c74_ref.xsl" type="text/xsl"?>

<!--This file has been automatically generated by Doctor Max. DO NOT EDIT THIS FILE DIRECTLY.-->

<c74object name="ears.hoa.decode~" module="ears">

	<digest>
		Decode higher-order ambisonic buffers
	</digest>

	<description>
		Decodes higher-order ambisonic buffers for a set of loudspeakers or for binaural listening
	</description>

	<!--METADATA-->
	<metadatalist>
		<metadata name="author">Daniele Ghisi</metadata>
		<metadata name="tag">ears ambisonic</metadata>
	</metadatalist>

	<!--INLETS-->
	<inletlist>
		<inlet id="0" type="INLET_TYPE">
			<digest>
				Incoming buffer names
			</digest>
			<description>
			</description>
		</inlet>
	</inletlist>

	<!--OUTLETS-->
	<outletlist>
		<outlet id="0" type="INLET_TYPE">
			<digest>
				Output buffer names
			</digest>
			<description>
			</description>
		</outlet>
	</outletlist>

	<!--ARGUMENTS-->
	<objarglist>
		<objarg name="outnames" optional="1" type="symbol">
			<digest>
				Output buffer names
			</digest>
			<description>
				The <o>outname</o> attribute sets a name (or a wrapped list of names) for each of the buffer outles
				of the objects in ears. These names are only accounted for if the <m>naming</m> mode is 'Static'. <br />
			</description>
		</objarg>
	</objarglist>

	<!--MESSAGES-->
	<methodlist>
		<method name="(mouse)">
			<arglist />
			<digest>
				Open the buffer display window
			</digest>
			<description>
				Double-clicking on the object will open the display window for the output buffer(s).
				If more than 10 buffers are to be output, only the first 10 are displayed.
			</description>
		</method>
		<method name="list/llll">
			<arglist />
			<digest>
				Function depends on inlet
			</digest>
			<description>
				A list or llll in the first inlet is supposed to contain buffer names and will
				trigger the buffer processing and output the processed buffer names (depending on the <m>naming</m> attribute). <br />
				A number or an llll in the second inlet is expected to contain a hoadecode parameter (depending on the <m>ampunit</m>) or
				an envelope (also see <m>envampunit</m>).
			</description>
		</method>
		<method name="number">
			<arglist />
			<digest>
				Set hoadecode
			</digest>
			<description>
				A number in the second inlet sets the hoadecode parameter (depending on the <m>ampunit</m>).
			</description>
		</method>
		<method name="reset">
			<arglist />
			<digest>
				Restart naming cycle
			</digest>
			<description>
				If the <m>naming</m> attribute is set to 'Dynamic',
				the <m>reset</m> message will force the dynamic naming to cycle and restart from the first
				used name. This is especially useful in combination with iterative mechanisms.
			</description>
		</method>
		<method name="write">
			<arg name="bufferindex" optional="1" type="int" />
			<arg name="filename_or_path" optional="1" type="symbol" />
			<digest>
				Save output as audio file
			</digest>
			<description>
				Message attributes:<br />
				<m>@format</m> (symbol, default: int16): Sample Format<br />
				<br />
				See equivalent <o>buffer~</o> method.
				Additional optional arguments specify the buffer index (if more than one buffer are stored in the objct)
				and the filename (otherwise a dialog menu will appear).
				Additional optional <m>format</m> message attributes specifies the output sample type, if applicable. <br />
				Accepted sampletype symbols are : 'int8' (8-bit integer), 'int16' (16-bit integer (default)),
				'int24' (24-bit integer), 'int32' (32-bit integer), 'float32' (32-bit floating-point),
				'float64' (64-bit floating-point), 'mulaw' (8-bit mu-law encoding), 'alaw' (8-bit a-law encoding) <br />
			</description>
		</method>
		<method name="writeaiff">
			<arg name="bufferindex" optional="1" type="int" />
			<arg name="filename_or_path" optional="1" type="symbol" />
			<digest>
				Save output as AIFF file
			</digest>
			<description>
				Message attributes:<br />
				<m>@format</m> (symbol, default: int16): Sample Format<br />
				<br />
				See equivalent <o>buffer~</o> method.
				Additional optional arguments specify the buffer index (if more than one buffer are stored in the objct)
				and the filename (otherwise a dialog menu will appear).
				Additional optional <m>format</m> message attributes specifies the output sample type, if applicable. <br />
				Accepted sampletype symbols are : 'int8' (8-bit integer), 'int16' (16-bit integer (default)),
				'int24' (24-bit integer), 'int32' (32-bit integer), 'float32' (32-bit floating-point),
				'float64' (64-bit floating-point), 'mulaw' (8-bit mu-law encoding), 'alaw' (8-bit a-law encoding) <br />
			</description>
		</method>
		<method name="writeflac">
			<arg name="bufferindex" optional="1" type="int" />
			<arg name="filename_or_path" optional="1" type="symbol" />
			<digest>
				Save output as FLAC file
			</digest>
			<description>
				Message attributes:<br />
				<m>@format</m> (symbol, default: int16): Sample Format<br />
				<br />
				See equivalent <o>buffer~</o> method.
				Additional optional arguments specify the buffer index (if more than one buffer are stored in the objct)
				and the filename (otherwise a dialog menu will appear).
				Additional optional <m>format</m> message attributes specifies the output sample type, if applicable. <br />
				Accepted sampletype symbols are : 'int8' (8-bit integer), 'int16' (16-bit integer (default)),
				'int24' (24-bit integer), 'int32' (32-bit integer), 'float32' (32-bit floating-point),
				'float64' (64-bit floating-point), 'mulaw' (8-bit mu-law encoding), 'alaw' (8-bit a-law encoding) <br />
			</description>
		</method>
		<method name="writemp3">
			<arg name="bufferindex" optional="1" type="int" />
			<arg name="filename_or_path" optional="1" type="symbol" />
			<digest>
				Save output as MP3 file
			</digest>
			<description>
				Message attributes:<br />
				<m>@vbrmode</m> (symbol, default: VBR): VBR mode ("VBR", "CBR" or "ABR")<br />
				<m>@bitrate</m> (int): Bitrate in kbps<br />
				<m>@minbitrate</m> (int): Minimum bitrate in kbps<br />
				<m>@maxbitrate</m> (int): Maximum bitrate in kbps<br />
				<br />
				Save the buffer as lossy compressed MP3 file.
				Additional optional arguments specify the buffer index (if more than one buffer are stored in the objct)
				and the filename (otherwise a dialog menu will appear).
				Additional optional message attributes specify the encoding properties (variable bitrate mode, bitrates). <br />
				Accepted sampletype symbols are : 'int8' (8-bit integer), 'int16' (16-bit integer (default)),
				'int24' (24-bit integer), 'int32' (32-bit integer), 'float32' (32-bit floating-point),
				'float64' (64-bit floating-point), 'mulaw' (8-bit mu-law encoding), 'alaw' (8-bit a-law encoding) <br />
			</description>
		</method>
		<method name="writeraw">
			<arg name="bufferindex" optional="1" type="int" />
			<arg name="filename_or_path" optional="1" type="symbol" />
			<digest>
				Save output as raw file with no header
			</digest>
			<description>
				Message attributes:<br />
				<m>@format</m> (symbol, default: int16): Sample Format<br />
				<br />
				See equivalent <o>buffer~</o> method.
				Additional optional arguments specify the buffer index (if more than one buffer are stored in the objct)
				and the filename (otherwise a dialog menu will appear).
				Additional optional <m>format</m> message attributes specifies the output sample type, if applicable. <br />
				Accepted sampletype symbols are : 'int8' (8-bit integer), 'int16' (16-bit integer (default)),
				'int24' (24-bit integer), 'int32' (32-bit integer), 'float32' (32-bit floating-point),
				'float64' (64-bit floating-point), 'mulaw' (8-bit mu-law encoding), 'alaw' (8-bit a-law encoding) <br />
			</description>
		</method>
		<method name="writewave">
			<arg name="bufferindex" optional="1" type="int" />
			<arg name="filename_or_path" optional="1" type="symbol" />
			<digest>
				Save output as WAV file
			</digest>
			<description>
				Message attributes:<br />
				<m>@format</m> (symbol, default: int16): Sample Format<br />
				<br />
				See equivalent <o>buffer~</o> method.
				Additional optional arguments specify the buffer index (if more than one buffer are stored in the objct)
				and the filename (otherwise a dialog menu will appear).
				Additional optional <m>format</m> message attributes specifies the output sample type, if applicable. <br />
				Accepted sampletype symbols are : 'int8' (8-bit integer), 'int16' (16-bit integer (default)),
				'int24' (24-bit integer), 'int32' (32-bit integer), 'float32' (32-bit floating-point),
				'float64' (64-bit floating-point), 'mulaw' (8-bit mu-law encoding), 'alaw' (8-bit a-law encoding) <br />
			</description>
		</method>
		<method name="writewv">
			<arg name="bufferindex" optional="1" type="int" />
			<arg name="filename_or_path" optional="1" type="symbol" />
			<digest>
				Save output as WavPack file
			</digest>
			<description>
				Message attributes:<br />
				<m>@correction</m> (int, default: 0): Write correction file along with a lossy wv file<br />
				<m>@bitrate</m> (int): Bitrate in kbps<br />
				<m>@format</m> (symbol, default: int16): Sample Format<br />
				<br />
				Save the buffer as lossless WavPack compression, or as lossy WavPack compression along with a
				correction file (if the <m>correction</m> message attribute is set to 1). In this last case, a <m>bitrate</m>
				message attribute specifies the bitrate of the lossy .wv file in kbps.
				Additional optional arguments specify the buffer index (if more than one buffer are stored in the objct)
				and the filename (otherwise a dialog menu will appear).
				Optional message attributes specify the encoding properties (correction, bitrate, sample ). <br />
				Accepted sampletype symbols are : 'int8' (8-bit integer), 'int16' (16-bit integer (default)),
				'int24' (24-bit integer), 'int32' (32-bit integer), 'float32' (32-bit floating-point),
				'float64' (64-bit floating-point), 'mulaw' (8-bit mu-law encoding), 'alaw' (8-bit a-law encoding) <br />
			</description>
		</method>
	</methodlist>

	<!--ATTRIBUTES-->
	<attributelist>
		<attribute name="angleunit" get="1" set="1" type="int" size="1">
			<digest>
				Angle Values Are In
			</digest>
			<description>
				Sets the unit for angles: Radians (default), Degrees, or Turns.
			</description>
			<attributelist>
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Angle Values Are In" />
				<attribute name="paint" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="enumindex" />
			</attributelist>
		</attribute>
		<attribute name="azimuth" get="1" set="1" type="float_array" size="0">
			<digest>
				Loudspeakers Azimuth
			</digest>
			<description>
				Sets the azimuth of each loudspeaker (in the unit defined by the <m>angleunit</m> attribute)
			</description>
			<attributelist>
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Loudspeakers Azimuth" />
				<attribute name="paint" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="text_large" />
			</attributelist>
		</attribute>
		<attribute name="binaural" get="1" set="1" type="int" size="1">
			<digest>
				Binaural Decoding
			</digest>
			<description>
				Toggles the ability to decode into a binaural buffer
			</description>
			<attributelist>
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Binaural Decoding" />
				<attribute name="paint" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="onoff" />
			</attributelist>
		</attribute>
		<attribute name="blocksamps" get="1" set="1" type="int" size="1">
			<digest>
				Block Size In Samples
			</digest>
			<description>
				Sets the block size (in samples) for decoding
			</description>
			<attributelist>
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Block Size In Samples" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="text" />
			</attributelist>
		</attribute>
		<attribute name="dimension" get="1" set="1" type="symbol" size="1">
			<digest>
				Dimension
			</digest>
			<description>
				Sets the dimension (order will then be inferred from the number of input channels).
			</description>
			<attributelist>
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Dimension" />
				<attribute name="paint" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="enum" />
			</attributelist>
		</attribute>
		<attribute name="elevation" get="1" set="1" type="float_array" size="0">
			<digest>
				Loudspeakers Elevation
			</digest>
			<description>
				Sets the elevation of each loudspeaker (in the unit defined by the <m>angleunit</m> attribute)
			</description>
			<attributelist>
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Loudspeakers Elevation" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="text_large" />
			</attributelist>
		</attribute>
		<attribute name="naming" get="1" set="1" type="int" size="1">
			<digest>
				Output Naming Policy
			</digest>
			<description>
				Chooses the output buffer naming policy: <br />
				0 (Copy): the buffer name is copied from the input (in-place modification).
				Notice that some objects do not allow this policy. <br />
				1 (Static): a single buffer (and hence buffer name) is created, and always used as output. <br />
				2 (Dynamic): a new buffer (and buffer name) is created for each new command.
				Beware! This may allocate a lot of memory!
				You can always cycle on a fixed set of names via the <m>reset</m> message. <br />
				You can use a shortcut to define the naming policy via a first symbolic argument: use <b>=</b> for copy,
				<b>-</b> for static and <b>!</b> for dynamic.
			</description>
			<attributelist>
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Output Naming Policy" />
				<attribute name="paint" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="enumindex" />
			</attributelist>
		</attribute>
		<attribute name="outname" get="1" set="1" type="llll" size="1">
			<digest>
				Output Buffer Names
			</digest>
			<description>
				Sets the name for each one of the buffer outlets. Leave blank to auto-assign
				unique names.
			</description>
			<attributelist>
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Output Buffer Names" />
				<attribute name="paint" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="text" />
			</attributelist>
		</attribute>
	</attributelist>

	<!--DISCUSSION-->
	<discussion>
		The object uses the HOALibrary (https://github.com/CICM/HoaLibrary-Light)
		in turns using the Eigen library (http://eigen.tuxfamily.org)
		The normalization convention is SN2D or SN3D (depending on the dimension),
		the channel order is ACN.
	</discussion>

	<!--SEEALSO-->
	<seealsolist>
		<seealso name="ears.hoa.encode~" />
		<seealso name="ears.hoa.rotate~" />
		<seealso name="ears.hoa.mirror~" />
	</seealsolist>

	<misc name = "Input">
		<entry name ="Inlet 1 (symbol/list/llll)">
			<description>
				Incoming buffer names.
			</description>
		</entry>
	</misc>

	<misc name = "Output">
		<entry name ="Outlet 1 (symbol/list)">
			<description>
				Output buffer names.
			</description>
		</entry>
	</misc>

	<misc name = "Discussion">
		<entry name ="More details">
			<description>
		The object uses the HOALibrary (https://github.com/CICM/HoaLibrary-Light)
		in turns using the Eigen library (http://eigen.tuxfamily.org)
		The normalization convention is SN2D or SN3D (depending on the dimension),
		the channel order is ACN.
			</description>
		</entry>
		<entry name ="Keywords">
			<description>
buffer, ambisonic, decode, binaural, hoa, 3d.
			</description>
		</entry>
	</misc>

</c74object>