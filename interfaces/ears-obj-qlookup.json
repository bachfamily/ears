{
  "ears.stft~": {
    "digest": "Compute spectrograms",
    "module": "ears",
    "category": [
      "ears spectral"
    ],
    "keywords": [
      "buffer",
      "stft",
      "fourier",
      "transform",
      "spectrum"
    ],
    "seealso": [
      "ears.window~",
      "ears.istft~"
    ]
  },
  "ears.lace~": {
    "digest": "Interleave buffer channels",
    "module": "ears",
    "category": [
      "ears basic"
    ],
    "keywords": [
      "buffer",
      "lace",
      "channel",
      "pack",
      "interleave",
      "buffer",
      "combine"
    ],
    "seealso": [
      "ears.delace~",
      "ears.channel~"
    ]
  },
  "ears.specshow~": {
    "digest": "Display spectrograms",
    "module": "ears",
    "category": [
      "ears display"
    ],
    "keywords": [
      "buffer",
      "specshow",
      "spectrogram",
      "display",
      "stft",
      "cqt",
      "tempogram"
    ],
    "seealso": [
      "waveform~"
    ]
  },
  "ears.trans~": {
    "digest": "Transpose a buffer considered as a matrix",
    "module": "ears",
    "category": [
      "ears basic"
    ],
    "keywords": [
      "buffer",
      "trans",
      "transpose",
      "swap",
      "channel",
      "sample",
      "spectral"
    ],
    "seealso": [
      "ears.sftf~",
      "ears.cqt~",
      "bach.trans"
    ]
  },
  "ears.process~": {
    "digest": "Offline host for patches operating on buffers",
    "module": "ears",
    "category": [
      "ears process"
    ],
    "keywords": [
      "buffer",
      "offline",
      "patch",
      "patcher",
      "non-realtime"
    ],
    "seealso": [
      "ears.in",
      "ears.in~",
      "ears.mc.in~",
      "ears.out",
      "ears.out~",
      "ears.mc.out~",
      "ears.processinfo~",
      "ears.tovector~",
      "ears.fromvector~"
    ]
  },
  "ears.join~": {
    "digest": "Concatenate buffers",
    "module": "ears",
    "category": [
      "ears basic"
    ],
    "keywords": [
      "buffer",
      "crossfade",
      "joinenate",
      "sequence",
      "merge"
    ],
    "seealso": [
      "ears.crop~",
      "ears.read~",
      "ears.fade~",
      "ears.mix~"
    ]
  },
  "ears.playmp3~": {
    "digest": "Play mp3 natively",
    "module": "ears",
    "category": [
      "ears playback"
    ],
    "keywords": [
      "play",
      "mpeg",
      "mp3",
      "compressed",
      "native",
      "file"
    ],
    "seealso": [
      "ears.writetags",
      "ears.readtags"
    ]
  },
  "ears.model.sine.synthesis~": {
    "digest": "Sinusoidal synthesis model",
    "module": "ears",
    "category": [
      "ears spectral"
    ],
    "keywords": [
      "buffer",
      "model",
      "synthesis",
      "resynthesis"
    ],
    "seealso": [
      "ears.model.sine.analysis~"
    ]
  },
  "ears.crop~": {
    "digest": "Crop a buffer",
    "module": "ears",
    "category": [
      "ears basic"
    ],
    "keywords": [
      "buffer",
      "crop",
      "cut",
      "extract",
      "portion",
      "subbuffer"
    ],
    "seealso": [
      "ears.trim~",
      "ears.fade~",
      "ears.repeat~"
    ]
  },
  "ears.clip~": {
    "digest": "Buffer hard clipping",
    "module": "ears",
    "category": [
      "ears distorsion"
    ],
    "keywords": [
      "buffer",
      "clip",
      "distort",
      "hard"
    ],
    "seealso": [
      "ears.overdrive~",
      "clip"
    ]
  },
  "ears.rubberband~": {
    "digest": "Rubber Band pitch and time processing",
    "module": "ears",
    "category": [
      "ears time and pitch"
    ],
    "keywords": [
      "buffer",
      "pitch",
      "stretch",
      "shift",
      "pitchshift",
      "timestretch",
      "rubberband",
      "rubber",
      "band"
    ],
    "seealso": [
      "ears.paulstretch~",
      "ears.resample~"
    ]
  },
  "ears.model.stochastic.analysis~": {
    "digest": "Sinusoidal-plus-residual analysis model",
    "module": "ears",
    "category": [
      "ears spectral"
    ],
    "keywords": [
      "buffer",
      "model",
      "analysis",
      "resynthesis"
    ],
    "seealso": [
      "ears.model.stochastic.synthesis~"
    ]
  },
  "ears.mc.in~": {
    "digest": "Signal input for a patch loaded by ears.process~",
    "module": "ears",
    "category": [
      "ears process"
    ],
    "keywords": [
      "buffer",
      "offline",
      "patch",
      "patcher",
      "non-realtime",
      "multichannel"
    ],
    "seealso": [
      "ears.in",
      "ears.in~",
      "ears.out~",
      "ears.tovector~"
    ]
  },
  "ears.read~": {
    "digest": "Store files in buffers",
    "module": "ears",
    "category": [
      "ears basic"
    ],
    "keywords": [
      "buffer",
      "file",
      "open",
      "read",
      "replace",
      "import",
      "load"
    ],
    "seealso": [
      "ears.write~"
    ]
  },
  "ears.slice~": {
    "digest": "Slice a buffer into two",
    "module": "ears",
    "category": [
      "ears basic"
    ],
    "keywords": [
      "buffer",
      "slice",
      "split"
    ],
    "seealso": [
      "ears.rev~",
      "ears.rot~",
      "ears.split~"
    ]
  },
  "ears.format~": {
    "digest": "Modify buffers properties",
    "module": "ears",
    "category": [
      "ears conversions"
    ],
    "keywords": [
      "buffer",
      "format",
      "property",
      "change"
    ],
    "seealso": [
      "ears.info~",
      "ears.normalize~",
      "ears.reg~",
      "ears.resample~"
    ]
  },
  "ears.features~": {
    "digest": "Extract buffer features",
    "module": "ears",
    "category": [
      "ears distorsion"
    ],
    "keywords": [
      "buffer",
      "features",
      "feature",
      "descriptor"
    ],
    "seealso": [
      "ears.spectrogram~"
    ]
  },
  "ears.unpack~": {
    "digest": "Unpack buffer channels",
    "module": "ears",
    "category": [
      "ears basic"
    ],
    "keywords": [
      "buffer",
      "unpack",
      "combine",
      "channel",
      "buffer"
    ],
    "seealso": [
      "ears.pack~",
      "ears.channel~"
    ]
  },
  "ears.processinfo~": {
    "digest": "Report information about the process running",
    "module": "ears",
    "category": [
      "ears process"
    ],
    "keywords": [
      "buffer",
      "offline",
      "patch",
      "patcher",
      "non-realtime"
    ],
    "seealso": [
      "ears.process~",
      "ears.in",
      "ears.in~",
      "ears.mc.in~",
      "ears.out",
      "ears.out~",
      "ears.mc.out~",
      "ears.tovector~",
      "ears.fromvector~"
    ]
  },
  "ears.hoa.mirror~": {
    "digest": "Mirror higher-order ambisonic buffers",
    "module": "ears",
    "category": [
      "ears ambisonic"
    ],
    "keywords": [
      "buffer",
      "ambisonic",
      "mirror",
      "hoa",
      "3d",
      "invert",
      "swap",
      "transform"
    ],
    "seealso": [
      "ears.hoa.encode~",
      "ears.hoa.decode~",
      "ears.hoa.rotate~"
    ]
  },
  "ears.fromsamps~": {
    "digest": "Create a buffer from an llll",
    "module": "ears",
    "category": [
      "ears basic"
    ],
    "keywords": [
      "buffer",
      "convert",
      "create",
      "samples"
    ],
    "seealso": [
      "ears.tosamps~"
    ]
  },
  "ears.resample~": {
    "digest": "Resample buffer",
    "module": "ears",
    "category": [
      "ears conversions"
    ],
    "keywords": [
      "buffer",
      "resample",
      "property",
      "change",
      "vinyl"
    ],
    "seealso": [
      "ears.format~",
      "ears.reg~"
    ]
  },
  "ears.onepole~": {
    "digest": "Single pole lowpass or highpass filter for buffers",
    "module": "ears",
    "category": [
      "ears filter"
    ],
    "keywords": [
      "buffer",
      "onepole",
      "filter",
      "lowpass",
      "hipass",
      "highpass",
      "attenuation"
    ],
    "seealso": [
      "onepole~",
      "ears.biquad~"
    ]
  },
  "ears.rot~": {
    "digest": "Circular rotation of a buffer",
    "module": "ears",
    "category": [
      "ears basic"
    ],
    "keywords": [
      "buffer",
      "rotate",
      "circular",
      "circularly",
      "loop"
    ],
    "seealso": [
      "ears.rev~",
      "ears.repeat~",
      "ears.slice~"
    ]
  },
  "ears.write~": {
    "digest": "Save buffers to files",
    "module": "ears",
    "category": [
      "ears basic"
    ],
    "keywords": [
      "buffer",
      "file",
      "write",
      "save",
      "export"
    ],
    "seealso": [
      "ears.read~"
    ]
  },
  "ears.in~": {
    "digest": "Signal input for a patch loaded by ears.process~",
    "module": "ears",
    "category": [
      "ears process"
    ],
    "keywords": [
      "buffer",
      "offline",
      "patch",
      "patcher",
      "non-realtime"
    ],
    "seealso": [
      "ears.in",
      "ears.mc.in~",
      "ears.out~",
      "ears.tovector~"
    ]
  },
  "ears.tosamps~": {
    "digest": "Get buffer samples as llll",
    "module": "ears",
    "category": [
      "ears basic"
    ],
    "keywords": [
      "buffer",
      "samples",
      "retrieve"
    ],
    "seealso": [
      "ears.fromsamps~"
    ]
  },
  "ears.info~": {
    "digest": "Get information on buffers",
    "module": "ears",
    "category": [
      "ears basic"
    ],
    "keywords": [
      "buffer",
      "info",
      "get",
      "retrieve",
      "rms",
      "amplitude",
      "peak"
    ],
    "seealso": [
      "info~"
    ]
  },
  "ears.channel~": {
    "digest": "Get buffer channels",
    "module": "ears",
    "category": [
      "ears basic"
    ],
    "keywords": [
      "buffer",
      "get",
      "channel",
      "pick",
      "nth",
      "obtain",
      "extract"
    ],
    "seealso": [
      "ears.pack~"
    ]
  },
  "ears.freeverb~": {
    "digest": "Freeverb reverberation",
    "module": "ears",
    "category": [
      "ears reverb"
    ],
    "keywords": [
      "buffer",
      "reverb",
      "freeverb",
      "reverberation"
    ],
    "seealso": [
      "ears.biquad~",
      "ears.onepole~",
      "ears.paulstretch~"
    ]
  },
  "ears.assemble~": {
    "digest": "Mix buffers one by one",
    "module": "ears",
    "category": [
      "ears basic"
    ],
    "keywords": [
      "buffer",
      "assemble",
      "mix",
      "superpose",
      "merge"
    ],
    "seealso": [
      "ears.mix~",
      "ears.read~"
    ]
  },
  "ears.repeat~": {
    "digest": "Repeat buffer",
    "module": "ears",
    "category": [
      "ears basic"
    ],
    "keywords": [
      "buffer",
      "repeat",
      "loop",
      "iterate"
    ],
    "seealso": [
      "ears.rev~",
      "ears.rot~",
      "ears.crop~"
    ]
  },
  "ears.model.sps.analysis~": {
    "digest": "Sinusoidal-plus-residual analysis model",
    "module": "ears",
    "category": [
      "ears spectral"
    ],
    "keywords": [
      "buffer",
      "model",
      "analysis",
      "resynthesis"
    ],
    "seealso": [
      "ears.model.sps.synthesis~"
    ]
  },
  "ears.pan~": {
    "digest": "1D buffer panning",
    "module": "ears",
    "category": [
      "ears pan"
    ],
    "keywords": [
      "buffer",
      "pan",
      "panoramics",
      "stereo",
      "mono"
    ],
    "seealso": [
      "ears.gain~"
    ]
  },
  "ears.paulfreeze~": {
    "digest": "Paulstretch freeze",
    "module": "ears",
    "category": [
      "ears time and pitch"
    ],
    "keywords": [
      "buffer",
      "stretch",
      "freeze",
      "eternal",
      "expand"
    ],
    "seealso": [
      "ears.paulstretch~"
    ]
  },
  "ears.cqt~": {
    "digest": "Constant-Q Transform",
    "module": "ears",
    "category": [
      "ears spectral"
    ],
    "keywords": [
      "buffer",
      "cqt",
      "q",
      "constant",
      "fourier",
      "transform",
      "spectrum"
    ],
    "seealso": [
      "ears.window~",
      "ears.stft~"
    ]
  },
  "ears.dynamics~": {
    "digest": "Dynamics processing",
    "module": "ears",
    "category": [
      "ears dynamics"
    ],
    "keywords": [
      "buffer",
      "compress",
      "expand",
      "dynamics",
      "limit",
      "limiter"
    ],
    "seealso": [
      "ears.gain~"
    ]
  },
  "ears.envelope~": {
    "digest": "Fill a buffer with an envelope or a number",
    "module": "ears",
    "category": [
      "ears basic"
    ],
    "keywords": [
      "buffer",
      "envelope",
      "bpf",
      "breakpoint",
      "function",
      "generate",
      "produce"
    ],
    "seealso": [
      "ears.gain~",
      "ears.window~"
    ]
  },
  "ears.fade~": {
    "digest": "Apply fades",
    "module": "ears",
    "category": [
      "ears basic"
    ],
    "keywords": [
      "buffer",
      "fade",
      "fadein",
      "fadeout",
      "in",
      "out"
    ],
    "seealso": [
      "ears.join~"
    ]
  },
  "ears.hoa.decode~": {
    "digest": "Decode higher-order ambisonic buffers",
    "module": "ears",
    "category": [
      "ears ambisonic"
    ],
    "keywords": [
      "buffer",
      "ambisonic",
      "decode",
      "binaural",
      "hoa",
      "3d"
    ],
    "seealso": [
      "ears.hoa.encode~",
      "ears.hoa.rotate~",
      "ears.hoa.mirror~"
    ]
  },
  "ears.biquad~": {
    "digest": "Two-pole two-zero filter for buffers",
    "module": "ears",
    "category": [
      "ears filter"
    ],
    "keywords": [
      "buffer",
      "biquad",
      "filter",
      "lowpass",
      "hipass",
      "highpass",
      "bandpass",
      "bandreject",
      "hishelf",
      "lowshelf",
      "resonant",
      "attenuation"
    ],
    "seealso": [
      "biquad~",
      "ears.onepole~"
    ]
  },
  "ears.filterempty~": {
    "digest": "Filter out empty buffers",
    "module": "ears",
    "category": [
      "ears basic"
    ],
    "keywords": [
      "buffer",
      "filter",
      "empty",
      "sieve",
      "remove",
      "amplitude"
    ],
    "seealso": [
      "ears.normalize~"
    ]
  },
  "ears.pack~": {
    "digest": "Pack buffer channels",
    "module": "ears",
    "category": [
      "ears basic"
    ],
    "keywords": [
      "buffer",
      "pack",
      "combine",
      "channel",
      "buffer"
    ],
    "seealso": [
      "ears.unpack~",
      "ears.channel~"
    ]
  },
  "ears.py~": {
    "digest": "Offline host for patches operating on buffers",
    "module": "ears",
    "category": [
      "ears py"
    ],
    "keywords": [
      "buffer",
      "offline",
      "patch",
      "patcher",
      "non-realtime"
    ],
    "seealso": [
      "ears.in",
      "ears.in~",
      "ears.mc.in~",
      "ears.out",
      "ears.out~",
      "ears.mc.out~",
      "ears.pyinfo~",
      "ears.tovector~",
      "ears.fromvector~"
    ]
  },
  "ears.rev~": {
    "digest": "Reverse buffer",
    "module": "ears",
    "category": [
      "ears basic"
    ],
    "keywords": [
      "buffer",
      "rev",
      "reverse",
      "retrograde",
      "retrogradation",
      "time"
    ],
    "seealso": [
      "ears.rot~",
      "ears.repeat~",
      "ears.slice~"
    ]
  },
  "ears.hoa.encode~": {
    "digest": "Encode 2D or 3D higher-order ambisonic buffers",
    "module": "ears",
    "category": [
      "ears ambisonic"
    ],
    "keywords": [
      "buffer",
      "ambisonic",
      "encode",
      "decode",
      "HOA",
      "3D"
    ],
    "seealso": [
      "ears.hoa.decode~",
      "ears.hoa.rotate~",
      "ears.hoa.mirror~"
    ]
  },
  "ears.expr~": {
    "digest": "Evaluate mathematical expressions on buffers",
    "module": "ears",
    "category": [
      "ears math"
    ],
    "keywords": [
      "buffer",
      "expr",
      "sum",
      "add",
      "operation",
      "arithmetic",
      "arithmetics"
    ],
    "seealso": [
      "ears.mix~"
    ]
  },
  "ears.model.sps.synthesis~": {
    "digest": "Sinusoidal synthesis model",
    "module": "ears",
    "category": [
      "ears spectral"
    ],
    "keywords": [
      "buffer",
      "model",
      "synthesis",
      "resynthesis"
    ],
    "seealso": [
      "ears.model.sps.analysis~"
    ]
  },
  "ears.paulstretch~": {
    "digest": "Paulstretch timestretching",
    "module": "ears",
    "category": [
      "ears time and pitch"
    ],
    "keywords": [
      "buffer",
      "stretch",
      "timestretch",
      "expand",
      "compress"
    ],
    "seealso": [
      "ears.freeverb~",
      "ears.paulfreeze~"
    ]
  },
  "ears.clicks~": {
    "digest": "Put clicks at time points",
    "module": "ears",
    "category": [
      "ears basic"
    ],
    "keywords": [
      "buffer",
      "click",
      "clicks",
      "collect"
    ],
    "seealso": [
      "ears.fromsamps~",
      "ears.mix~",
      "ears.assemble~"
    ]
  },
  "ears.fft~": {
    "digest": "Fast Fourier Transforms",
    "module": "ears",
    "category": [
      "ears spectral"
    ],
    "keywords": [
      "buffer",
      "fft",
      "fourier",
      "transform",
      "spectrum"
    ],
    "seealso": [
      "ears.window~",
      "ears.spectrogram~"
    ]
  },
  "ears.peaks~": {
    "digest": "Find peaks of a spectrogram",
    "module": "ears",
    "category": [
      "ears spectral"
    ],
    "keywords": [
      "buffer",
      "peaks",
      "spectrum"
    ],
    "seealso": [
      "ears.stft~",
      "ears.cqt~",
      "ears.trans~"
    ]
  },
  "ears.trim~": {
    "digest": "Trim silence from a buffer",
    "module": "ears",
    "category": [
      "ears basic"
    ],
    "keywords": [
      "buffer",
      "trim",
      "silence",
      "delete",
      "remove"
    ],
    "seealso": [
      "ears.split~",
      "ears.crop~"
    ]
  },
  "ears.normalize~": {
    "digest": "Normalize buffers",
    "module": "ears",
    "category": [
      "ears basic"
    ],
    "keywords": [
      "buffer",
      "normalize",
      "scale"
    ],
    "seealso": [
      "ears.read~",
      "ears.gain~"
    ]
  },
  "ears.offset~": {
    "digest": "Temporally offset a buffer",
    "module": "ears",
    "category": [
      "ears basic"
    ],
    "keywords": [
      "buffer",
      "offset",
      "add",
      "offset"
    ],
    "seealso": [
      "ears.crop~",
      "ears.rev~"
    ]
  },
  "ears.istft~": {
    "digest": "Inverse Short-Time Fourier Transform",
    "module": "ears",
    "category": [
      "ears spectral"
    ],
    "keywords": [
      "buffer",
      "istft",
      "fourier",
      "transform",
      "spectrum",
      "inverse"
    ],
    "seealso": [
      "ears.window~",
      "ears.stft~"
    ]
  },
  "ears.reg~": {
    "digest": "Store or clone buffers",
    "module": "ears",
    "category": [
      "ears basic"
    ],
    "keywords": [
      "buffer",
      "reg",
      "store",
      "keep"
    ],
    "seealso": [
      "ears.read~",
      "ears.convert~"
    ]
  },
  "ears.model.stochastic.synthesis~": {
    "digest": "Sinusoidal synthesis model",
    "module": "ears",
    "category": [
      "ears spectral"
    ],
    "keywords": [
      "buffer",
      "model",
      "synthesis",
      "resynthesis"
    ],
    "seealso": [
      "ears.model.stochastic.analysis~"
    ]
  },
  "ears.overdrive~": {
    "digest": "Buffer soft clipping",
    "module": "ears",
    "category": [
      "ears distorsion"
    ],
    "keywords": [
      "buffer",
      "overdrive",
      "distort",
      "hard"
    ],
    "seealso": [
      "ears.clip~",
      "overdrive"
    ]
  },
  "ears.roll.sampling~": {
    "digest": "Convert a <o>bach.roll</o> into a montage of audio samples",
    "module": "ears",
    "category": [
      "ears export"
    ],
    "keywords": [
      "buffer",
      "roll",
      "bounce",
      "export"
    ],
    "seealso": [
      "ears.read~",
      "ears.roll.toreaper~"
    ]
  },
  "ears.roll.toreaper~": {
    "digest": "Export a <o>bach.roll</o> as a Reaper project",
    "module": "ears",
    "category": [
      "ears export"
    ],
    "keywords": [
      "buffer",
      "roll",
      "bounce",
      "export",
      "Reaper"
    ],
    "seealso": [
      "ears.roll.sampling~",
      "ears.roll.sinusoids~"
    ]
  },
  "ears.mix~": {
    "digest": "Mix buffers",
    "module": "ears",
    "category": [
      "ears basic"
    ],
    "keywords": [
      "buffer",
      "mix",
      "superpose",
      "merge"
    ],
    "seealso": [
      "ears.assemble~",
      "ears.join~",
      "ears.crop~",
      "ears.read~",
      "ears.fade~"
    ]
  },
  "ears.window~": {
    "digest": "Apply an analysis window",
    "module": "ears",
    "category": [
      "ears basic"
    ],
    "keywords": [
      "buffer",
      "window",
      "apply",
      "hanning",
      "hamming",
      "triangular",
      "tri"
    ],
    "seealso": [
      "ears.envelope~"
    ]
  },
  "ears.gain~": {
    "digest": "Change buffer gain",
    "module": "ears",
    "category": [
      "ears basic"
    ],
    "keywords": [
      "buffer",
      "gain",
      "scale",
      "multiply",
      "factor"
    ],
    "seealso": [
      "ears.dynamics~",
      "ears.normalize~",
      "ears.envelope~"
    ]
  },
  "ears.model.sine.analysis~": {
    "digest": "Sinusoidal analysis model",
    "module": "ears",
    "category": [
      "ears spectral"
    ],
    "keywords": [
      "buffer",
      "model",
      "analysis",
      "resynthesis"
    ],
    "seealso": [
      "ears.model.sine.synthesis~"
    ]
  },
  "ears.roll.synthesis~": {
    "digest": "Convert a <o>bach.roll</o> into a mix of synthesis",
    "module": "ears",
    "category": [
      "ears export"
    ],
    "keywords": [
      "buffer",
      "roll",
      "bounce",
      "export",
      "synthesis",
      "cycle"
    ],
    "seealso": [
      "ears.read~"
    ]
  },
  "ears.split~": {
    "digest": "Split a buffer into multiple buffers",
    "module": "ears",
    "category": [
      "ears basic"
    ],
    "keywords": [
      "buffer",
      "split",
      "chop",
      "segment"
    ],
    "seealso": [
      "ears.slice~",
      "ears.trim~"
    ]
  },
  "ears.hoa.rotate~": {
    "digest": "Rotate higher-order ambisonic buffers",
    "module": "ears",
    "category": [
      "ears ambisonic"
    ],
    "keywords": [
      "buffer",
      "ambisonic",
      "rotate",
      "hoa",
      "3d",
      "rotation"
    ],
    "seealso": [
      "ears.hoa.encode~",
      "ears.hoa.decode~",
      "ears.hoa.mirror~"
    ]
  },
  "ears.tempogram~": {
    "digest": "Compute tempograms",
    "module": "ears",
    "category": [
      "ears spectral"
    ],
    "keywords": [
      "buffer",
      "tempogram",
      "spectrogram",
      "tempo",
      "rhythm",
      "transform",
      "spectrum"
    ],
    "seealso": [
      "ears.spectrogram~",
      "ears.features~"
    ]
  }
}
